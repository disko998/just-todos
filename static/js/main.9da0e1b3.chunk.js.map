{"version":3,"sources":["components/Todo.jsx","redux/todos.actions.js","components/TodoList.jsx","components/TodoCard.jsx","utils/index.js","redux/store.js","redux/todos.reducer.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","trash","alignSelf","text","props","textDecoration","completed","cursor","connect","dispatch","toggleTodo","id","type","payload","removeTodo","todo","classes","key","Box","display","alignItems","p","FormControlLabel","control","Checkbox","color","checked","onChange","value","Typography","onClick","className","IconButton","aria-label","fontSize","Divider","label","marginTop","textAlign","state","todos","length","map","Todo","box","width","justifyContent","flexDirection","title","input","button","addTodo","useState","todoValue","setValue","my","Paper","elevation","variant","px","TextField","e","target","Button","size","startIcon","TodoList","randomId","Math","random","toString","substr","rootReducer","combineReducers","action","concat","filter","persistConfig","storage","persistedReducer","persistReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","compose","store","createStore","persistor","persistStore","App","loading","Container","maxWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9da0e1b3.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Divider, Box, Typography, FormControlLabel, Checkbox, IconButton } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { toggleTodo, removeTodo } from '../redux/todos.actions'\r\n\r\nconst useStyle = makeStyles({\r\n    trash: {\r\n        alignSelf: 'self-end',\r\n    },\r\n    text: props => ({\r\n        textDecoration: props.completed ? 'line-through' : 'none',\r\n        cursor: 'pointer',\r\n    }),\r\n})\r\n\r\nfunction TodoCard({ todo, toggleTodo, removeTodo }) {\r\n    const props = { completed: todo.completed }\r\n    const classes = useStyle(props)\r\n\r\n    return (\r\n        <div key={todo.id}>\r\n            <Box display='flex' alignItems='center' p={2}>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            color='primary'\r\n                            checked={todo.completed}\r\n                            onChange={() => toggleTodo(todo.id)}\r\n                            value='checkedG'\r\n                        />\r\n                    }\r\n                />\r\n                <Typography onClick={() => toggleTodo(todo.id)} className={classes.text}>\r\n                    {todo.text}\r\n                </Typography>\r\n                <IconButton\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className={classes.trash}\r\n                    aria-label='delete'\r\n                    color='secondary'\r\n                >\r\n                    <DeleteIcon fontSize='small' />\r\n                </IconButton>\r\n            </Box>\r\n            <Divider />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleTodo: id => dispatch(toggleTodo(id)),\r\n    removeTodo: id => dispatch(removeTodo(id)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoCard)\r\n","export const addTodo = text => ({\r\n    type: 'ADD_TODO',\r\n    payload: text,\r\n})\r\n\r\nexport const removeTodo = id => ({\r\n    type: 'REMOVE_TODO',\r\n    payload: id,\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n    type: 'TOGGLE_TODO',\r\n    payload: id,\r\n})\r\n","import React from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport Todo from './Todo'\r\nimport { Typography, makeStyles } from '@material-ui/core'\r\n\r\nconst useStyle = makeStyles({\r\n    label: {\r\n        marginTop: 40,\r\n        textAlign: 'center',\r\n    },\r\n})\r\n\r\nfunction TodoCard({ todos }) {\r\n    const classes = useStyle()\r\n\r\n    return todos.length ? (\r\n        todos.map(todo => <Todo key={todo.id} todo={todo} />)\r\n    ) : (\r\n        <Typography className={classes.label}>{`Hey there, add some todos :)`}</Typography>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: state.todos,\r\n})\r\n\r\nexport default connect(mapStateToProps)(TodoCard)\r\n","import React, { useState } from 'react'\r\nimport { Typography, Box, Paper, TextField, Button } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox'\r\nimport { connect } from 'react-redux'\r\n\r\nimport TodoList from './TodoList'\r\nimport { addTodo } from '../redux/todos.actions'\r\n\r\nconst useStyle = makeStyles({\r\n    box: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    title: {\r\n        color: '#4d4d4d',\r\n        textAlign: 'center',\r\n    },\r\n    input: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginTop: 10,\r\n    },\r\n})\r\n\r\nfunction TodoCard({ addTodo }) {\r\n    const [todoValue, setValue] = useState('')\r\n    const classes = useStyle()\r\n\r\n    const addNewTodo = () => {\r\n        todoValue.length && addTodo(todoValue)\r\n        setValue('')\r\n    }\r\n    const onTextChange = e => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Box my={2}>\r\n            <Paper elevation={3} className={classes.box}>\r\n                <Box p={2}>\r\n                    <Typography variant='h4' className={classes.title}>\r\n                        Add To Do:\r\n                    </Typography>\r\n                    <Box my={2} px={2} display='flex' flexDirection='column'>\r\n                        <TextField\r\n                            value={todoValue}\r\n                            onChange={onTextChange}\r\n                            className={classes.input}\r\n                            id='todo'\r\n                            label='Add Todo'\r\n                            variant='outlined'\r\n                        />\r\n                        <Button\r\n                            onClick={addNewTodo}\r\n                            variant='contained'\r\n                            color='primary'\r\n                            size='large'\r\n                            className={classes.button}\r\n                            startIcon={<AddBoxIcon />}\r\n                        >\r\n                            Add\r\n                        </Button>\r\n                    </Box>\r\n                    <TodoList />\r\n                </Box>\r\n            </Paper>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTodo: text => dispatch(addTodo(text)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoCard)\r\n","export const randomId = () =>\r\n    '_' +\r\n    Math.random()\r\n        .toString(36)\r\n        .substr(2, 9)\r\n","import { createStore, compose, combineReducers } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport { todoReducer } from './todos.reducer'\r\n\r\nconst rootReducer = combineReducers({ todos: todoReducer })\r\n\r\nconst persistConfig = {\r\n    key: 'todos',\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n          trace: true,\r\n      })\r\n    : compose\r\n\r\nexport const store = createStore(persistedReducer, composeEnhancers())\r\n\r\nexport const persistor = persistStore(store)\r\n","import { randomId } from '../utils'\r\n\r\nexport function todoReducer(state = [], action) {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return state.concat([{ id: randomId(), text: action.payload, completed: false }])\r\n        case 'REMOVE_TODO':\r\n            return state.filter(todo => todo.id !== action.payload)\r\n        case 'TOGGLE_TODO':\r\n            return state.map(todo => (action.payload === todo.id ? { ...todo, completed: !todo.completed } : todo))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react'\nimport { Container } from '@material-ui/core'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { TodoCard } from './components'\nimport { store, persistor } from './redux/store'\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <Container maxWidth='md'>\n                    <TodoCard />\n                </Container>\n            </PersistGate>\n        </Provider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}